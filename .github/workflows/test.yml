name: Build and Test UniVPN Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ github.repository_owner }}/univpn-docker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    # 使用构建的镜像作为 job container 进行测试
    container:
      image: docker.io/${{ github.repository_owner }}/univpn-docker:${{ github.ref_name }}
      env:
        UNIVPN_SERVER: ${{ secrets.UNIVPN_SERVER }}
        UNIVPN_USERNAME: ${{ secrets.UNIVPN_USERNAME }}
        UNIVPN_PASSWORD: ${{ secrets.UNIVPN_PASSWORD }}
        UNIVPN_PORT: ${{ secrets.UNIVPN_PORT || '443' }}
      options: >-
        --privileged
    
    steps:
      - name: Test VPN connectivity
        run: |
          echo "Testing network connectivity through VPN..."
          curl -s --max-time 10 https://ipinfo.io/ip || echo "External IP check failed"
          ping -c 3 8.8.8.8 || echo "Ping test failed"
      
      - name: Test VPN wrapper commands
        run: |
          echo "Testing VPN wrapper status..."
          /app/univpn-wrapper.sh status || echo "Status check completed"
      
      - name: Test network environment
        run: |
          echo "Testing network environment..."
          ip route | head -5
          echo "Container networking is working!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.io/${{ github.repository_owner }}/univpn-docker:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
